{"version":3,"sources":["World.tsx","exceptions.ts","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["World","_ref","photos","viewport","onViewportChange","react_default","a","createElement","Map","onViewPortChanged","style","height","width","maxZoom","TileLayer","url","attribution","id","accessToken","zoomOffset","tileSize","react_leaflet_markercluster_min_default","showCoverageOnHover","maxClusterRadius","iconCreateFunction","cluster","firstPhotoHtml","getAllChildMarkers","options","icon","html","L","divIcon","className","concat","getChildCount","iconSize","map","photo","Marker","position","key","Popup","minWidth","src","file","name","GeoTagsMissing","_Error","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","wrapNativeSuper","Error","InvalidImage","_Error2","convertDMSToDD","degrees","minutes","seconds","direction","dd","Number","extractPositionOfImage","_x","_extractPositionOfImage","_callee","exifData","unsafeLatitude","unsafeLongitude","unsafeLatitudeRef","unsafeLongitudeRef","regenerator_default","wrap","_context","prev","next","Promise","resolve","EXIF","getData","getAllTags","sent","undefined","abrupt","stop","inputToDataUrl","reader","FileReader","addEventListener","dataUrl","result","readAsDataURL","Header","Layout","Content","Sider","App","_useState","useState","_useState2","slicedToArray","photoList","setPhotoList","_useState3","center","zoom","_useState4","setViewport","layout","background","es_button","shape","href","e","upload","onPreview","find","uid","customRequest","_ref2","asyncToGenerator","mark","onSuccess","onError","prevPhotoList","toConsumableArray","t0","notification","error","message","description","onRemove","filter","p","originFileObj","multiple","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd5d3930.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Map, TileLayer, Marker, Popup, Viewport } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport L from \"leaflet\";\n\nexport interface IPhoto {\n  url: string;\n  position: L.LatLngExpression;\n  uid: string;\n  file: File;\n}\n\ninterface IWorld {\n  photos: IPhoto[];\n  viewport: Viewport;\n  onViewportChange: (e: Viewport) => void;\n}\n\nexport default function World({ photos, viewport, onViewportChange }: IWorld) {\n  return (\n    <Map\n      onViewPortChanged={onViewportChange}\n      viewport={viewport}\n      style={{ height: \"calc(100vh - 64px)\", width: \"100%\" }}\n      maxZoom={20}\n    >\n      <TileLayer\n        url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\n        attribution='<a href=\"https://github.com/titouancreach\"> @titouancreach </a>'\n        id=\"mapbox/streets-v11\"\n        accessToken=\"pk.eyJ1IjoieXVuamllbGkiLCJhIjoiY2lxdmV5MG5rMDAxNmZta3FlNGhyMmpicSJ9.CTEQgAyZGROcpJouZuzJyA\"\n        zoomOffset={-1}\n        tileSize={512}\n      />\n\n      <MarkerClusterGroup\n        showCoverageOnHover={false}\n        maxClusterRadius={100}\n        iconCreateFunction={cluster => {\n          const firstPhoto = cluster!.getAllChildMarkers()[0]!.options!.icon!\n            .options as L.DivIconOptions;\n          const firstPhotoHtml = firstPhoto.html;\n          return L.divIcon({\n            className: \"leaflet-marker-photo\",\n            html: `${firstPhotoHtml}â€‹<b>${cluster.getChildCount()}</b>`,\n            iconSize: [64, 64]\n          });\n        }}\n      >\n        {photos.map(photo => (\n          <Marker\n            position={photo.position}\n            key={photo.url}\n            icon={L.divIcon({\n              html: `<div style=\"background-image: url(${photo.url});\"></div>`,\n              className: \"leaflet-marker-photo\",\n              iconSize: [40, 40]\n            })}\n          >\n            <Popup className=\"leaflet-popup-photo\" minWidth={400}>\n              <figure>\n                <img src={photo.url} />\n                <figcaption className=\"pt2 tc\">{photo.file.name}</figcaption>\n              </figure>\n            </Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n    </Map>\n  );\n}\n","export class GeoTagsMissing extends Error {}\nexport class InvalidImage extends Error {}","import EXIF from \"exif-js\";\n\nimport { GeoTagsMissing, InvalidImage } from \"./exceptions\";\n\ntype Direction = \"W\" | \"S\" | \"N\" | \"E\";\n\nfunction convertDMSToDD(\n  degrees: number,\n  minutes: number,\n  seconds: number,\n  direction: Direction\n) {\n  let dd = Number(degrees) + Number(minutes) / 60 + Number(seconds) / (60 * 60);\n\n  if (direction == \"S\" || direction == \"W\") {\n    dd = dd * -1;\n  }\n  return dd;\n}\n\nexport async function extractPositionOfImage(\n  file: File\n): Promise<L.LatLngExpression> {\n\n  const exifData = (await new Promise((resolve) =>\n    EXIF.getData(file, function(this: typeof EXIF.getData) {\n      resolve(EXIF.getAllTags(this));\n    })\n  )) as any;\n\n  const unsafeLatitude = exifData[\"GPSLatitude\"] as number[] | undefined;\n  const unsafeLongitude = exifData[\"GPSLongitude\"] as number[] | undefined;\n  const unsafeLatitudeRef = exifData[\"GPSLatitudeRef\"] as Direction;\n  const unsafeLongitudeRef = exifData[\"GPSLongitudeRef\"] as Direction;\n\n  if (unsafeLatitude === undefined || unsafeLongitude === undefined) {\n    throw new GeoTagsMissing();\n  }\n\n  const position = [\n    convertDMSToDD(\n      unsafeLatitude![0],\n      unsafeLatitude![1],\n      unsafeLatitude![2],\n      unsafeLatitudeRef\n    ),\n    convertDMSToDD(\n      unsafeLongitude![0],\n      unsafeLongitude![1],\n      unsafeLongitude![2],\n      unsafeLongitudeRef\n    ),\n  ] as L.LatLngExpression;\n\n  return position;\n}\n\nexport function inputToDataUrl(file: File): Promise<string> {\n  const reader = new FileReader();\n\n  return new Promise((resolve) => {\n    reader.addEventListener(\n      \"load\",\n      () => {\n        const dataUrl = reader.result as string;\n        resolve(dataUrl);\n      },\n      false\n    );\n\n    reader.addEventListener(\"error\", () => {\n      throw new InvalidImage();\n    });\n\n    reader.readAsDataURL(file);\n  });\n}\n","import React, { useState } from \"react\";\n\nimport { Layout, Button, Upload, Icon, notification } from \"antd\";\n\nconst { Header, Content, Sider } = Layout;\n\nimport World, { IPhoto } from \"./World\";\nimport { RcFile } from \"antd/lib/upload/interface\";\nimport { inputToDataUrl, extractPositionOfImage } from \"./utils\";\nimport { Viewport } from \"react-leaflet\";\n\nimport { GeoTagsMissing, InvalidImage } from \"./exceptions\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [photoList, setPhotoList] = useState<IPhoto[]>([]);\n\n  const [viewport, setViewport] = useState<Viewport>({\n    center: [48.8534, 2.3488],\n    zoom: 13,\n  });\n\n  return (\n    <Layout>\n      <Header\n        className=\"flex items-center justify-between bg-white shadow-1 z-2\"\n        style={{ background: \"white\" }}\n      >\n        <h1 className=\"f3 ma0 o-80\">Geopicture</h1>\n        <Button\n          shape=\"circle\"\n          icon=\"github\"\n          href=\"https://github.com/titouancreach/geopicture-web\"\n        />\n      </Header>\n      <Layout>\n        <Content>\n          <World\n            photos={photoList}\n            viewport={viewport}\n            onViewportChange={(e) => {\n              setViewport(e);\n            }}\n          />\n        </Content>\n        <Sider style={{ background: \"white\" }} className=\"z-1 shadow-1 pa3\" width=\"250\">\n          <div className=\"w-100 tc\">\n            <Upload\n              name=\"images\"\n              onPreview={(file) => {\n                const photo = photoList.find((photo) => photo.uid === file.uid);\n\n                if (!photo) {\n                  return;\n                }\n\n                const position = photo!.position as [number, number]; // Love totally broken leaflet types <3\n                setViewport({\n                  zoom: 20,\n                  center: position,\n                });\n              }}\n              customRequest={async ({\n                file,\n                onSuccess,\n                onError,\n              }: {\n                file: RcFile;\n                onSuccess: Function;\n                onError: Function;\n              }) => {\n                try {\n                  const url = await inputToDataUrl(file);\n\n                  const position = await extractPositionOfImage(file);\n                  const { uid } = file;\n\n                  const photo = {\n                    position,\n                    url,\n                    uid,\n                    file,\n                  };\n                  setPhotoList((prevPhotoList) => [...prevPhotoList, photo]);\n                  onSuccess();\n                } catch (e) {\n                  if (e instanceof GeoTagsMissing) {\n                    notification.error({\n                      message: \"Missing or invalid geotags\",\n                      description:\n                        \"The image contains invalid geotags and cannot be displayed on the map\",\n                    });\n                  } else {\n                    notification.error({\n                      message: \"Invalid image\",\n                      description:\n                        \"The image is invalid\",\n                    });\n                  }\n\n                  onError(e);\n                }\n              }}\n              onRemove={(file) => {\n                setPhotoList((prevPhotoList) => {\n                  return prevPhotoList.filter((p) => {\n                    return file.originFileObj !== p.file;\n                  });\n                });\n              }}\n              multiple\n            >\n              <Button className=\"ma2 mt0\">\n                <Icon type=\"upload\" /> Click to upload\n              </Button>\n            </Upload>\n          </div>\n        </Sider>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}